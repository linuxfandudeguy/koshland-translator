---
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

// Define the root directory of your repository
const rootDir = path.resolve('.');

// Function to get all files recursively from the root directory, excluding node_modules and .git
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(file => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      // Exclude node_modules and .git directories
      if (file !== 'node_modules' && file !== '.git') {
        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
      }
    } else {
      arrayOfFiles.push(fullPath);
    }
  });

  return arrayOfFiles;
}

// Function to calculate SHA-256 hash of a file
function calculateHash(filePath) {
  const fileBuffer = fs.readFileSync(filePath);
  const hashSum = crypto.createHash('sha256');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

// Get all files in the repository
const allFiles = getAllFiles(rootDir);

// Generate diagnostics data for each file, including hash
const fileDiagnostics = allFiles.map(file => ({
  name: path.basename(file),
  path: file,
  size: fs.statSync(file).size, // Get file size in bytes
  modifiedDate: fs.statSync(file).mtime.toLocaleString(), // Last modified date
  hash: calculateHash(file), // Get file's SHA-256 hash
}));

let commitDiagnostics = [];

async function fetchCommits() {
  try {
    const response = await fetch('https://koshland-trans-commit-gh-api.vercel.app/api/commits');
    const commits = await response.json();

    // Check if commits is an array before mapping
    if (Array.isArray(commits)) {
      commitDiagnostics = commits.map(commit => ({
        sha: commit.sha,
        url: commit.html_url,
        author: {
          name: commit.commit.author.name,
          email: commit.commit.author.email,
          date: new Date(commit.commit.author.date).toLocaleString(),
          avatar: commit.author.avatar_url, // Add profile picture URL
        },
        committer: {
          name: commit.commit.committer.name,
          email: commit.commit.committer.email,
          date: new Date(commit.commit.committer.date).toLocaleString(),
        },
        message: commit.commit.message,
        tree: {
          sha: commit.commit.tree.sha,
          url: commit.commit.tree.url,
        },
        verified: commit.commit.verification.verified ? 'Yes' : 'No',
        parentCommits: commit.parents.map(parent => ({
          sha: parent.sha,
          url: parent.html_url,
        })),
      }));
    } else {
      console.error('GitHub API response is not an array:', commits);
    }
  } catch (error) {
    console.error('Error fetching GitHub commits:', error);
  }
}

// Call the function to fetch commits
await fetchCommits();
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diagnostics Page</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css?v={Date.now}">
</head>
<body>
    <div class="container">
        <h1 class="mt-4">Diagnostics Information</h1>

        <h2 class="mt-4">Files</h2>
        <div class="row">
            {fileDiagnostics.map(file => (
                <div class="col-md-4 mb-3" key={file.path}>
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">{file.name}</h5>
                            <p class="card-text"><strong>Path:</strong> {file.path}</p>
                            <p class="card-text"><strong>Size:</strong> {file.size} bytes</p>
                            <p class="card-text"><strong>Last Modified:</strong> {file.modifiedDate}</p>
                            <p class="card-text"><strong>SHA-256 Hash:</strong> {file.hash}</p>
                        </div>
                    </div>
                </div>
            ))}
        </div>

        <h2 class="mt-4">GitHub Commits</h2>
        <div class="row">
            {commitDiagnostics.map(commit => (
                <div class="col-md-4 mb-3" key={commit.sha}>
                    <div class="card">
                        <img src={commit.author.avatar} alt={`${commit.author.name}'s avatar`} class="card-img-top" />
                        <div class="card-body">
                            <h5 class="card-title">{commit.message}</h5>
                            <p class="card-text"><strong>SHA:</strong> {commit.sha}</p>
                            <p class="card-text"><strong>Author:</strong> {commit.author.name} ({commit.author.email})</p>
                            <p class="card-text"><strong>Committer:</strong> {commit.committer.name} ({commit.committer.email})</p>
                            <p class="card-text"><strong>Date:</strong> {commit.author.date}</p>
                            <p class="card-text"><strong>Tree SHA:</strong> {commit.tree.sha}</p>
                            <p class="card-text"><strong>Verified:</strong> {commit.verified}</p>
                            <p class="card-text"><strong>Parent Commits:</strong></p>
                            <ul>
                                {commit.parentCommits.map(parent => (
                                    <li key={parent.sha}>
                                        <a href={parent.url} target="_blank">{parent.sha}</a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js?v={Date.now}"></script>
</body>
</html>
