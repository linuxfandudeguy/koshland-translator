---
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

// Define the root directory of your repository
const rootDir = path.resolve('.');

// Function to get all files recursively from the root directory, excluding node_modules and .git
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(file => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      // Exclude node_modules and .git directories
      if (file !== 'node_modules' && file !== '.git') {
        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
      }
    } else {
      arrayOfFiles.push(fullPath);
    }
  });

  return arrayOfFiles;
}

// Function to calculate SHA-256 hash of a file
function calculateHash(filePath) {
  const fileBuffer = fs.readFileSync(filePath);
  const hashSum = crypto.createHash('sha256');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

// Get all files in the repository
const allFiles = getAllFiles(rootDir);

// Generate diagnostics data for each file, including hash
const fileDiagnostics = allFiles.map(file => ({
  name: path.basename(file),
  path: file,
  size: fs.statSync(file).size, // Get file size in bytes
  modifiedDate: fs.statSync(file).mtime.toLocaleString(), // Last modified date
  hash: calculateHash(file), // Get file's SHA-256 hash
}));

let commitDiagnostics = [];

try {
  // Fetch GitHub commits (replace with the correct API endpoint)
  const response = await fetch('https://koshland-trans-commit-gh-api.vercel.app/api/commits');
  const commits = await response.json();

  // Check if commits is an array before mapping
  if (Array.isArray(commits)) {
    commitDiagnostics = commits.map(commit => ({
      sha: commit.sha,
      url: commit.html_url,
      author: {
        name: commit.commit.author.name,
        email: commit.commit.author.email,
        date: new Date(commit.commit.author.date).toLocaleString()
      },
      committer: {
        name: commit.commit.committer.name,
        email: commit.commit.committer.email,
        date: new Date(commit.commit.committer.date).toLocaleString()
      },
      message: commit.commit.message,
      tree: {
        sha: commit.commit.tree.sha,
        url: commit.commit.tree.url
      },
      verified: commit.commit.verification.verified ? 'Yes' : 'No',
      parentCommits: commit.parents.map(parent => ({
        sha: parent.sha,
        url: parent.html_url
      }))
    }));
  } else {
    console.error('GitHub API response is not an array:', commits);
  }
} catch (error) {
  console.error('Error fetching GitHub commits:', error);
}
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diagnostics Page</title>
</head>
<body>
    <h1>Diagnostics Information</h1>

    <h2>Files</h2>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Path</th>
                <th>Size (bytes)</th>
                <th>Last Modified</th>
                <th>SHA-256 Hash</th>
            </tr>
        </thead>
        <tbody>
            {fileDiagnostics.map(file => (
                <tr key={file.path}>
                    <td>{file.name}</td>
                    <td>{file.path}</td>
                    <td>{file.size}</td>
                    <td>{file.modifiedDate}</td>
                    <td>{file.hash}</td>
                </tr>
            ))}
        </tbody>
    </table>

    <h2>GitHub Commits</h2>
    <table>
        <thead>
            <tr>
                <th>SHA</th>
                <th>URL</th>
                <th>Author</th>
                <th>Committer</th>
                <th>Date</th>
                <th>Message</th>
                <th>Tree SHA</th>
                <th>Verified</th>
                <th>Parent Commits</th>
            </tr>
        </thead>
        <tbody>
            {commitDiagnostics.map(commit => (
                <tr key={commit.sha}>
                    <td>{commit.sha}</td>
                    <td><a href={commit.url} target="_blank">View Commit</a></td>
                    <td>{commit.author.name} ({commit.author.email})</td>
                    <td>{commit.committer.name} ({commit.committer.email})</td>
                    <td>{commit.author.date}</td>
                    <td>{commit.message}</td>
                    <td>{commit.tree.sha}</td>
                    <td>{commit.verified}</td>
                    <td>
                        {commit.parentCommits.map(parent => (
                            <div key={parent.sha}>
                                <a href={parent.url} target="_blank">{parent.sha}</a>
                            </div>
                        ))}
                    </td>
                </tr>
            ))}
        </tbody>
    </table>
</body>
</html>
