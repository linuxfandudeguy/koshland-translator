---
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

// Define the root directory of your repository
const rootDir = path.resolve('.');

// Function to get all files recursively from the root directory, excluding node_modules and .git
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = fs.readdirSync(dirPath);

  files.forEach(file => {
    const fullPath = path.join(dirPath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      // Exclude node_modules and .git directories
      if (file !== 'node_modules' && file !== '.git') {
        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
      }
    } else {
      arrayOfFiles.push(fullPath);
    }
  });

  return arrayOfFiles;
}

// Function to calculate SHA-256 hash of a file
function calculateHash(filePath) {
  const fileBuffer = fs.readFileSync(filePath);
  const hashSum = crypto.createHash('sha256');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

// Get all files in the repository
const allFiles = getAllFiles(rootDir);

// Generate diagnostics data for each file, including hash
const fileDiagnostics = allFiles.map(file => ({
  name: path.basename(file),
  path: file,
  size: fs.statSync(file).size, // Get file size in bytes
  modifiedDate: fs.statSync(file).mtime.toLocaleString(), // Last modified date
  hash: calculateHash(file), // Get file's SHA-256 hash
}));

// Fetch GitHub commits (replace the API endpoint with the correct one)
const response = await fetch('https://api.github.com/repos/{owner}/{repo}/commits'); // Replace {owner} and {repo} with your repo details
const commits = await response.json();
const commitDiagnostics = commits.map(commit => ({
  sha: commit.sha,
  message: commit.commit.message,
  author: commit.commit.author.name,
  authorEmail: commit.commit.author.email,
  committer: commit.commit.committer.name,
  committerEmail: commit.commit.committer.email,
  commitDate: new Date(commit.commit.committer.date).toLocaleString(),
  verified: commit.commit.verification.verified,
  treeSha: commit.commit.tree.sha,
  treeUrl: commit.commit.tree.url,
  parentCommits: commit.parents.map(parent => ({
    sha: parent.sha,
    url: parent.html_url
  }))
}));
---

<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Diagnostics page for Koshi Translator GitHub commits">
    <meta name="keywords" content="Koshi, GitHub, commits, diagnostics">
    <meta name="author" content="linuxfandudeguy">
    <meta name="generator" content="Astro 4.15.11">
    <meta name="theme-color" content="#ffffff">
    <title>Koshi Translator Diagnostics</title>
    <!-- Local Bootstrap 5.3.3 CSS with cache-busting -->
    <link rel="stylesheet" href={`/bootstrap-5.3.3-dist/css/esbuild/bundled/bootstrap.bundle.min.css?t=${Date.now()}`} />
    <style>
      body {
        background-color: white;
      }
      .card {
        border: 1px solid #ccc;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 10px;
      }
      .card-header {
        font-weight: bold;
        font-size: 1.2em;
      }
      .card-details {
        font-size: 0.9em;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-md-8 mt-5 pt-5">
          <h1 class="text-center font-weight-bold mb-4">Koshi Translator Diagnostics</h1>

          <h2>File Diagnostics</h2>
          <!-- Display file diagnostics -->
          <div id="files">
            {fileDiagnostics.map(file => (
              <div class="card">
                <div class="card-header">
                  File Name: {file.name}
                </div>
                <div class="card-details">
                  <p><strong>Path:</strong> {file.path}</p>
                  <p><strong>Size:</strong> {file.size} bytes</p>
                  <p><strong>Last Modified:</strong> {file.modifiedDate}</p>
                  <p><strong>Hash (SHA-256):</strong> {file.hash}</p>
                </div>
              </div>
            ))}
          </div>

          <h2>GitHub Commits</h2>
          <!-- Display commit diagnostics -->
          <div id="commits">
            {commitDiagnostics.map(commit => (
              <div class="card">
                <div class="card-header">
                  Commit SHA: <a href="{commit.treeUrl}" target="_blank">{commit.sha}</a>
                </div>
                <div class="card-details">
                  <p><strong>Message:</strong> {commit.message}</p>
                  <p><strong>Author:</strong> {commit.author} ({commit.authorEmail})</p>
                  <p><strong>Committer:</strong> {commit.committer} ({commit.committerEmail})</p>
                  <p><strong>Commit Date:</strong> {commit.commitDate}</p>
                  <p><strong>Verified:</strong> {commit.verified ? 'Yes' : 'No'}</p>
                  <p><strong>Tree SHA:</strong> {commit.treeSha}</p>
                  <p><strong>Parent Commits:</strong> {commit.parentCommits.map(parent => (
                    <a href="{parent.url}" target="_blank">{parent.sha}</a>
                  )).join(', ')}</p>
                </div>
              </div>
            ))}
          </div>

        </div>
      </div>
    </div>

    <!-- Initial script with cache-busting -->
    <script type="text/javascript" src={`/webpack/js/init/init.bundle.min.js?t=${Date.now()}`} defer></script>
  </body>
</html>
